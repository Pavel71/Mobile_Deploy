import UIKit
import PlaygroundSupport
//: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å "–≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ" background tasks, –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –Ω–∞ Playground –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–∞.
PlaygroundPage.current.needsIndefiniteExecution = true
//: ## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Global Queues
//: 1. –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è (serial) main queue
let mainQueue = DispatchQueue.main
//: 2. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ  concurrent dispatch queues
let userInteractiveQueue = DispatchQueue.global(qos: .userInteractive)
let userQueue = DispatchQueue.global(qos: .userInitiated)
let utilityQueue = DispatchQueue.global(qos:  .utility)
let backgroundQueue = DispatchQueue.global(qos:  .background)
//: ------–ì–ª–æ–±–∞–ª—å–Ω–∞—è concurrent .default dispatch queue --------
let defaultQueue = DispatchQueue.global() // .default
//: ## –ó–∞–¥–∞–Ω–∏—è:
func task(_ symbol: String) { for i in 1...10 {
    print("\(symbol) \(i) –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = \(qos_class_self().rawValue)")
    }
}

func taskHIGH(_ symbol: String) {
    print("\(symbol) HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = \(qos_class_self().rawValue)")
}
//: ## –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
print("---------------------------------------------------")
print("   –°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ sync ")
print("   Global .concurrent Q1 - .userInitiated ")
print("---------------------------------------------------")
userQueue.sync {task("üòÄ")}
task("üëø")
sleep (2)

print("---------------------------------------------------")
print("   –ê–°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ async ")
print("   Global .concurrent Q1 - .userInitiated ")
print("---------------------------------------------------")
userQueue.async {task("üòÄ")}
task("üëø")
//: ## Private Serial Queue (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å)
//: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é —è–≤–ª—è–µ—Ç—Å—è `DispatchQueue.main`, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å Private –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏. –ó–∞–º–µ—Ç—å—Ç–µ, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç `.serial` (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è) –∑–∞–¥–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Private Dispatch Queue, –µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ:
//: ###   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å  mySerialQueue
let mySerialQueue = DispatchQueue(label: "com.bestkora.mySerial")

print("---------------------------------------------------")
print("   –°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ sync ")
print("   Private .serial Q1 - no ")
print("---------------------------------------------------")

mySerialQueue.sync { task("üòÄ")}
task("üëø")

print("---------------------------------------------------")
print("   –ê–°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ async ")
print("   Private .serial Q1 - no ")
print("---------------------------------------------------")
mySerialQueue.async { task("üòÄ")}
task("üëø")

//: ###   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å c –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
print("---------------------------------------------------")
print("   Private .serial Q1 - .userInitiated ")
print("---------------------------------------------------")
let serialPriorityQueue = DispatchQueue(label: "com.bestkora.serialPriority", qos : .userInitiated)
serialPriorityQueue.async { task("üòÄ")}
serialPriorityQueue.async {task("üëø")}
sleep (1)

//: ###   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ c —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
print("---------------------------------------------------")
print("   Private .serial Q1 - .userInitiated")
print("                   Q2 - .background ")
print("---------------------------------------------------")

let serialPriorityQueue1 = DispatchQueue(label: "com.bestkora.serialPriority", qos : .userInitiated)
let serialPriorityQueue2 = DispatchQueue(label: "com.bestkora.serialPriority", qos : .background)
serialPriorityQueue2.async { task("üòÄ")}
serialPriorityQueue1.async {task("üëø")}
sleep (1)

//: ###   asyncAfter c –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
print("---------------------------------------------------")
print("   asynAfter (.userInteractiv) –Ω–∞ Q2")
print("   Private .serial Q1 - .utility")
print("                   Q2 - .background")
print("---------------------------------------------------")
let serialUtilityQueue = DispatchQueue(label: "com.bestkora.serialUtilityriority", qos : .utility)
let serialBackgroundQueue = DispatchQueue(label: "com.bestkora.serialBackgroundPriority", qos : .background)

serialBackgroundQueue.asyncAfter (deadline:  .now() + 0.1, qos: .userInteractive) {task("üëø")}
serialUtilityQueue.async { task("üòÄ")}
sleep (1)

//: ###  highPriorityItem = DispatchWorkItem
let highPriorityItem = DispatchWorkItem (qos: .userInteractive, flags:[.enforceQoS]){
    taskHIGH("üå∫")
}

/*let highPriorityItem = DispatchWorkItem(qos: .userInteractive, flags:[.enforceQoS, .assignCurrentContext]) {
 taskHIGH("üå∫")
 }*/

//: ## Private Concurrent Queue (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å)
//: –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è private __concurrent__ queue –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ attributes –∑–∞–¥–∞—Ç—å `.concurrent`.
//: ###  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è Private –æ—á–µ—Ä–µ–¥—å c –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
print("---------------------------------------------------")
print(" Private  .concurrent Q - .userInitiated ")
print("---------------------------------------------------")
let workerQueue = DispatchQueue(label: "com.bestkora.worker_concurrent", qos: .userInitiated, attributes: .concurrent)
workerQueue.async  {task("üòÄ")}
workerQueue.async {task("üëø")}
sleep (2)

//: ###   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å c –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
print("---------------------------------------------------")
print(" –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å c –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
print(" Private  .concurrent Q - .userInitiated, .initiallyInactive")
print("---------------------------------------------------")

let workerDelayQueue = DispatchQueue(label: "com.bestkora.worker_concurrent", qos: .userInitiated, attributes: [.concurrent, .initiallyInactive])
workerDelayQueue.async  {task("üòÄ")}
workerDelayQueue.async {task("üëø")}
sleep (1)

//: ### –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ c —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
print("---------------------------------------------------")
print("    .concurrent Q1 - .userInitiated ")
print("                Q2 - .background ")
print("---------------------------------------------------")

let workerQueue1 = DispatchQueue(label: "com.bestkora.worker_concurrent1",  qos: .userInitiated, attributes: .concurrent)
let workerQueue2 = DispatchQueue(label: "com.bestkora.worker_concurrent1",  qos: .background, attributes: .concurrent)

workerQueue2.async  {task("üòÄ")}
workerQueue1.async {task("üëø")}
//workerQueue1.async(execute: highPriorityItem)
//workerQueue2.async(execute: highPriorityItem)
sleep (1)

print("---------------------------------------------------")
print(" –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏")
print(" —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
print("---------------------------------------------------")
workerDelayQueue.activate()
sleep (1)

//: ###   asyncAfter c –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
print("---------------------------------------------------")
print("   asynAfter (.userInteractive) –Ω–∞ Q2")
print("   Private .concurrent Q1 - .userInitiated")
print("                       Q2 - .background")
print("---------------------------------------------------")

workerQueue2.asyncAfter (deadline:  .now() + 0.1, qos: .userInteractive) {task("üëø")}
workerQueue1.async { task("üòÄ")}
workerQueue2.async(execute: highPriorityItem)
workerQueue1.async(execute: highPriorityItem)
sleep (1)

//: ##  –°–ò–ù–•–†–û–ù–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –æ—á–µ—Ä–µ–¥—è–º–∏
//: –ù—É–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º —Å –º–µ—Ç–æ–¥–æ–º `sync` –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π, –ø–æ—Ç–æ–º—É —á—Ç–æ "—Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫" –≤—ã–Ω—É–∂–¥–µ–Ω –∂–¥–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π –æ—á–µ—Ä–µ–¥–∏. **–ù–ò–ö–û–ì–î–ê –ù–ï** –≤—ã–∑—ã–≤–∞–π—Ç–µ –º–µ—Ç–æ–¥ `sync` –Ω–∞  **main queue,** –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ deadlock –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!
//:
//: –ù–æ `sync` –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race conditions ‚Äî –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å - serial queue, —Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±, –∫–∞–∫–∏–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ sync –∫–∞–∫  _mutual exclusion lock_ (–≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞).
//:
//: –ú—ã –º–æ–∂–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª—É—á–∞–π race condition, –µ—Å–ª–∏ –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `value` –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞ private –æ—á–µ—Ä–µ–¥–∏, –∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å `value` –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ:
print("--- –ò–º–∏—Ç–∞—Ü–∏—è race condition ---")

var value = "üòá"
func changeValue(variant: Int) {
    sleep(1)
    value = value + "üêî"; print ("\(value) - \(variant)");
}
//: –ó–∞–ø—É—Å–∫–∞–µ–º `changeValue()` –ê–°–ò–ù–•–†–û–ù–ù–û –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º `value` –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ
mySerialQueue.async {
    changeValue(variant: 1)
}
value
//: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏–º `value`, –∞ –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏–º `changeValue()` __–°–ò–ù–•–†–û–ù–ù–û__, –±–ª–æ–∫–∏—Ä—É—è —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∑–∞–¥–∞–Ω–∏–µ `changeValue` –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —É–±–∏—Ä–∞—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º race condition:
value = "ü¶ä"
mySerialQueue.sync {
    changeValue(variant:2)
}
value
sleep(3)

//: –ó–∞–ø—É—Å–∫–∞–µ–º `changeValue()` –°–ò–ù–•–†–û–ù–ù–û –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º `value` –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ
print("--- –£–±–∏—Ä–∞–µ–º race condition —Å –ø–æ–º–æ—â—å—é sync---")
value = "üòá"
mySerialQueue.sync {
    changeValue(variant: 1)
}
value
//: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏–º `value`, –∞ –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏–º `changeValue()` __–°–ò–ù–•–†–û–ù–ù–û__, –±–ª–æ–∫–∏—Ä—É—è —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∑–∞–¥–∞–Ω–∏–µ `changeValue` –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —É–±–∏—Ä–∞—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º race condition:

value = "ü¶ä"
mySerialQueue.sync {
    changeValue(variant:2)
}
value
sleep(2)
//: ## Playground –∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
//: –ó–∞–º–µ—á–∞–Ω–∏–µ: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ finishExecution —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ main queue –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –≤–∫–ª—é—á–∏—Ç—å –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –†–µ–¥–∞–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å UI
//: #### –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ main queue
mainQueue.async {
    let a = 0
    print("main queue: a = \(a)")
}
print("Running on default queue")
//: #### –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ default queue
defaultQueue.async {
    let a = 42
    print("default queue: a = \(a)")
}
//: ####  –î–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã  playground:
sleep(2)
//PlaygroundPage.current.finishExecution()
//: ####  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Playground –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –≤—ã –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç–µ finishExecution()
