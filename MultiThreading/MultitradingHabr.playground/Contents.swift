import Cocoa

var str = "Multitrading"

var value = "üëª"

func changeValue(variant: Int) {
  sleep(1)
  value = value + "üéÉ"
  print(value, variant)
}

//func task(_ symbol: String) {
//  for i in 1...10 {
//    print("\(symbol) \(i) –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = \(qos_class_self().rawValue)")
//  }
//}
//
//func Hightask(_ symbol: String) {
//  for i in 1...10 {
//    print("\(symbol) \(i) HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = \(qos_class_self().rawValue)")
//  }
//}

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å!
let userQueue = DispatchQueue(label: "UserQueu")

/// –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ + –º—ã –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

//userQueue.sync {
//  task("üéÉ")
//}
//task("ü•∂")

// –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ + –º—ã –æ—Ç—â–µ–ª–∫–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ

//// –°–Ω–∞—á–∞–ª–∞ –ø–æ–π–¥–µ—Ç –æ—Ä–∞–Ω–∂–µ–≤–∞—è –º–æ—Ä–¥–∞ –ø–æ—Ç–æ–º —Å–∏–Ω—è—è –ø–æ—Ç–æ–º –∑–µ–ª–µ–Ω–∞—è
//userQueue.async {
//  task("üéÉ")
//}
//userQueue.async {
//  task("ü§¢")
//}
//
//task("ü•∂")

/// –ó–∞–¥–∞—á–∏ –æ—Ç—â–µ–ª–∫–Ω—É—Ç—Å—è –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø–æ—Ç–æ–º –æ–Ω–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –≤–ø–µ—Ä–µ–º–µ—à–∫—É –∏ –≤ –∫–æ–Ω—Ü–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∑–∞–¥–∞—á–∞ main –ø–æ—Ç–æ–∫–∞
let userQueueConcarent = DispatchQueue(label: "UserQueu",attributes: .concurrent)

//userQueueConcarent.async {
//  task("üéÉ")
//}
//userQueueConcarent.async {
//  task("ü§¢")
//}
//userQueueConcarent.sync {
//  task("ü•∂")
//}
//
//task("üëø")

/// –•–æ—Ä–æ—à–æ –¢–µ–ø–µ—Ä—å –ø–æ—Ä–∞–±–æ—Ç–∞—é —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏

public class ThreadSafeString {
  
  private var internalString = ""
  let isolationQueue = DispatchQueue(label: "com.pavelM.isolation",  attributes: .concurrent)
  
  public func addString(string: String) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –ë–∞—Ä—å–µ—Ä–æ–º! –ó–∞–¥–∞—á–∞ –Ω–∞—á–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –æ—á–µ—Ä–µ–¥—å –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏
    isolationQueue.async(flags: .barrier) {
      self.internalString = self.internalString + string
    }
  }
  
  public func setString(string: String) {
    isolationQueue.async(flags: .barrier) {
      self.internalString =  string
    }
  }
  
  public init (_ string: String) {
    isolationQueue.async(flags: .barrier) {
      self.internalString = string
    }
  }
  // –ú–µ—Ç–æ–¥ –ø–æ —á—Ç–µ–Ω–∏—é —Å—Ç—Ä–æ–∫–∏
  // –¢–∞–∫ –∫–∞–∫ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞ –±–∞—Ä—å–µ—Ä–µ –∑–Ω–∞—á–∏—Ç –æ–Ω–∏ –≤—Å–µ –±—É–¥—É—Ç –∂–¥–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —á—Ç–µ–Ω–∏—è! –¢–∞–∫ –∫–∞–∫ –æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
  public var text: String {
    var result = ""
    isolationQueue.sync {
      result = self.internalString
    }
    return result
  }
  
  
}

var safeString = ThreadSafeString("")
var usualString = ""

let userQueueConcarentAddString = DispatchQueue(label: "UserQueu",attributes: .concurrent)

func task(_ symbol: String) {
  for i in 1...10 {
    print("\(symbol) \(i) –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = \(qos_class_self().rawValue)")
    safeString.addString(string: symbol)
    usualString = usualString + symbol
  }
}


userQueueConcarentAddString.async {
  task("üéÉ")
}
task("üëø")

print("ThreadSafe \(safeString.text)")
print("UsualString \(usualString)")


